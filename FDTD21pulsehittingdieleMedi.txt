"""
Simulation of a pulse hitting a dielectric medium
Sinusoidal source
"""


import numpy as np
from math import exp
from matplotlib import pyplot as plt

# Data
ke = 200
ex = np.zeros(ke)
hy = np.zeros(ke)
#t0 = 40
#spread = 12

ddx = 0.01                                                    # cell size
dt = ddx/ 6e8                                                 # Time step
freq_in = 700e6


boundary_low = [0, 0]
boundary_high= [0, 0]

# Create Dielectric Profile
epsz = 8.854e-12

sigma = 0.04


cb = np.ones(ke)
cb = 0.5 * cb
cb_start = 100
epsilon  =  4
cb[cb_start:] = 0.5/epsilon

nsteps = 425

# Dictionary to keep track of desired points for plotting
plotting_points = [{'num_steps': 100, 'data_to_plot': None, 'label': ''}, {'num_steps': 220, 'data_to_plot': None, 'label': ''},
{'num_steps': 320, 'data_to_plot': None, 'label': ''}, {'num_steps': 425, 'data_to_plot': None, 'label': 'FDTD cells'}]


# Main FDTD Loop
for time_step in range(1, nsteps + 1):
    for k in range(1, ke):                                       # Calculate the Ex field
        ex[k] = ex[k] + cb[k] * (hy[k - 1] - hy[k])
    pulse = np.sin(2 * np.pi * freq_in * dt * time_step)              # Put a sinusoidal at the low end
    ex[5] = pulse + ex[5]                                    # Soft Source

    ex[0] = boundary_low.pop(0)                                 # Absorbing Boundary Conditions
    boundary_low.append(ex[1])
    ex[ke - 1] = boundary_high.pop(0)
    boundary_high.append(ex[ke - 2])
   
    for k in range(ke - 1):                                     # Calculate the Hy field
        hy[k] = hy[k] + 0.5 * (ex[k] - ex[k + 1])

    for plotting_point in plotting_points:                      # Save data at certain points for later plotting
        if time_step == plotting_point['num_steps']:
            plotting_point['data_to_plot'] = np.copy(ex)
           
   
# Plot the outputs as shown in Fig. 1.4
plt.rcParams['font.size'] = 12
fig = plt.figure(figsize=(8, 7))

def plot_e_field(data, timestep, epsilon, cb, label):          # Plot of E field at a single time step
    plt.plot(data, color='b', linewidth=1)
    plt.ylabel('E$_x$', fontsize='14')
    plt.xticks(np.arange(0, 199, step=20))
    plt.xlim(0, 199)
    plt.yticks(np.arange(-0.5, 1.2, step=0.8))
    plt.ylim(-1.2, 1.5)
    plt.text(70, 0.5, 'T = {}'.format(timestep), horizontalalignment='center')
    plt.plot((0.9 / cb - 1) / 3, 'g--', linewidth=0.75)         # The math on cb above is just for scaling
    plt.text(170, 0.5, 'Eps = {}'.format(epsilon),
    horizontalalignment='center')
    plt.xlabel('{}'.format(label))
   

# Plot the E field at each of the time steps saved earlier
for subplot_num, plotting_point in enumerate(plotting_points):
    ax = fig.add_subplot(4, 1, subplot_num +1)
    plot_e_field(plotting_point['data_to_plot'],
    plotting_point['num_steps'], epsilon, cb,
    plotting_point['label'])
    plt.subplots_adjust(bottom=0.1, hspace=0.45)
    plt.show()